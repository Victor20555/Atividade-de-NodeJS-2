// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           Int    @id @default(autoincrement())
  name         String
  email        String @unique
  passwordHash String
  picture      String

  posts    Post[]    @relation()
  comments Comment[] @relation()
  likes    Like[]    @relation()

  @@map("users")
}

model Post {
  id      Int    @id @default(autoincrement())
  title   String
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  comments Comment[] @relation()
  likes    Like[]    @relation()

  @@map("posts")
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  
  createdAt DateTime @default(now())

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  postId Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  likes Like[] @relation()

  @@map("comments")
}

model Like {
  id Int @id @default(autoincrement())
  
  createdAt DateTime @default(now())

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  postId Int?
  post   Post? @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  commentId Int?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([userId, postId, commentId])
  @@map("likes")
}
